--- 
  - hosts: localhost
    gather_facts: false
    tasks:
      - name: Import main variables 
        include_vars: vars/main_vars

      - name: Importing required variables
        include_vars: vars/bastion_vars

      - name: Importing additional required variables
        include_vars: vars/output_vars

      - name: create a new key pair, return generated private key
        ec2_key:
          name: "{{keypair_name}}"
          region: "{{ region }}"
        register: keypair_output
      
      - name: Download the keypair
        copy:
          content: "{{ keypair_output.key.private_key }}"
          dest: "keys/{{ keypair_name }}.pem"
          mode: 0400
        when: keypair_output.changed

      - name: security group for bastion hosts
        ec2_group:
          name: "SG-{{ name }}-{{ host_name }}"
          description: "{{desc}}"
          region: "{{ region }}"
          vpc_id: "{{ vpcid }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: "{{ myIP }}"
              rule_desc: allow ssh traffic from my IP
          tags:
            Name: "SG-{{ name }}-{{ host_name }}"
            Service: Security Group
            Environment: "{{ env }}"
            Resource owner: "{{ res_owner }}"
            Team: "{{ team }}"
        register: bastion_sg_information

      - name: creating bastion host
        ec2_instance:
          key_name: "{{ keypair_name }}"
          instance_type: "{{ ec2_type }}"
          image_id: "{{ ami }}"
          wait: yes
          wait_timeout: 300
          security_group: "{{ bastion_sg_information.group_id }}"
          region: "{{ region }}"
          vpc_subnet_id: "{{ pubsub01id }}"
          user_data: |
            #!/bin/bash
            sudo apt update -y 
            sudo apt upgrade -y 
            sudo apt install -y git unzip python3 python3-boto3 python3-boto python3-pip
            sudo yes | pip install ansible
          network:
            assign_public_ip: true
          tags:
            Name: "ec2-{{ name }}-{{ host_name }}"
            Service: Jump Server
            Environment: "{{ env }}"
            Resource owner: "{{ res_owner }}"
            Team: "{{ team }}"
          exact_count: 1
        register: Bastion_host_information

      - debug:
          var: Bastion_host_information
      # - debug:
      #         msg: "id: {{ Bastion_host_information.tagged_instances[0]['id'] }}"
          
      - name: create an ec2 output file 
        copy:
          content: "bastion_keypair: {{keypair_output.key.name}}\nbastion_ec2_sg: {{bastion_sg_information.group_id}}\nbastion_host_id: {{ Bastion_host_information.instance_ids }}"
          dest: vars/bastion_output_vars
        when: Bastion_host_information.changed