---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Import main variables
      include_vars: vars/main_vars

    - name: Import additional required variables
      include_vars: vars/output_vars
    
    - name: Import additional required variables
      include_vars: vars/bastion_output_vars
    
    - name: Import additional required variables
      include_vars: vars/stack_vars

    - name: create a new key pair, return generated private key
      ec2_key:
        name: "{{ ec2_keypair_name }}"
        region: "{{ region }}"
      register: ec2_keypair_output
      
    - name: Download the keypair
      copy:
        content: "{{ec2_keypair_output.key.private_key}}"
        dest: "keys/{{ec2_keypair_name}}.pem"
        mode: 0400
      when: ec2_keypair_output.changed

    - name: security group for Load Balancer
      ec2_group:
        name: "alb_sg_{{ name }}"
        description: allow http traffic from anywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow http traffic from anywhere
        tags:
          Name: "alb_sg_{{ name }}"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
      register: app_lb_sg_information

    - name: security group for Vprofile stack
      ec2_group:
        name: "app_sg_{{ name }}"
        description: allow ssh traffic from everywhere and all ports within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{app_lb_sg_information.group_id}}"
            rule_desc: allow http traffic from my load balancer
          
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastion_ec2_sg}}"
            rule_desc: allow ssh traffic from my IP
        tags:
          Name: "app_sg_{{ name }}"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
      register: app_sg_information

    # - debug: 
    #     var: app_sg_information
    
    # - debug:
    #     var: app_sg_information.group_id

    - name: updating Vprofile stack security group with itself. 
      ec2_group:
        name:  "app_sg_{{ name }}"
        description: allow ssh traffic from everywhere and all ports within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{app_sg_information.group_id}}"
            rule_desc: allow all traffic within the group
        tags:
          Name: "app_sg_{{ name }}"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
      register: app_sg_update_information

    - name: creating Nginx host web01
      ec2_instance:
        key_name: "{{ ec2_keypair_name }}"
        instance_type: "{{ ec2_type }}"
        image_id: "{{ami}}"
        wait: yes
        wait_timeout: 300
        security_group: "{{app_sg_information.group_id}}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ prisub01id }}"
        tags:
          Name: "ec2_{{ name }}_web01"
          Service: "Web Server"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        exact_count: 1
      register: web01_host_information

    # - name: Display web01_host_information 
    #   debug: 
    #     var: web01_host_information.instances[0].instance_id

    - name: creating Tomcat host app01
      ec2_instance:
        key_name: "{{ ec2_keypair_name }}"
        instance_type: "{{ ec2_type }}"
        image_id: "{{ami}}"
        wait: yes
        wait_timeout: 300
        security_group: "{{app_sg_information.group_id}}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ prisub01id }}"
        tags:
          Name: "ec2_{{ name }}_app01"
          Service: "App Server"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        exact_count: 1
      register: app01_host_information

    - name: creating Memcached host mc01
      ec2_instance:
        key_name: "{{ ec2_keypair_name }}"
        instance_type: "{{ ec2_type }}"
        image_id: "{{ami}}"
        wait: yes
        wait_timeout: 300
        security_group: "{{app_sg_information.group_id}}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ prisub01id }}"
        tags:
          Name: "ec2_{{ name }}_mc01"
          Service: "Memcached Server"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        exact_count: 1
      register: mc01_host_information

    - name: Display mc01_host_information 
      debug: 
        var: mc01_host_information

    - name: creating RabbitMQ host rmq01
      ec2_instance:
        key_name: "{{ ec2_keypair_name }}"
        instance_type: "{{ ec2_type }}"
        image_id: "{{ami}}"
        wait: yes
        wait_timeout: 300
        security_group: "{{app_sg_information.group_id}}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ prisub01id }}"
        tags:
          Name: "ec2_{{ name }}_rmq01"
          Service: "RabbitMQ Server"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        exact_count: 1
      register: rmq01_host_information

    - name: creating MYSQL host db01
      ec2_instance:
        key_name: "{{ ec2_keypair_name }}"
        instance_type: "{{ ec2_type }}"
        image_id: "{{ami}}"
        wait: yes
        wait_timeout: 300
        security_group: "{{app_sg_information.group_id}}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ prisub01id }}"
        tags:
          Name: "ec2_{{ name }}_db01"
          Service: "MYSQL Server"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        exact_count: 1
      register: db01_host_information
    
    # - debug:
    #     var: db01_host_information

    - name: gather ec2 instance information based on VPC id
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          vpc-id: "{{ vpcid }}"
      register: ec2_instance_information

    - name: Create a target group with instance targets
      elb_target_group:
        name: "alb_TG_{{ name }}"
        region: "{{ region }}"
        modify_targets: no
        protocol: http
        port: 81
        vpc_id: "{{ vpcid }}"
        health_check_protocol: http
        health_check_path: /
        successful_response_codes: "200,250-260"
        targets:
          - Id: "{{web01_host_information.instances[0].instance_id}}"
            Port: 80
        state: present
        # wait_timeout: 200
        # wait: True
        tags:
          Name: "alb_TG_{{ name }}"
          Service: "ALB target group"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
      when: web01_host_information.changed
      register: elb_TG_information

    # - debug: 
    #     var: elb_TG_information

    - name: Create a Application load balancer with instance targets
      elb_application_lb:
        name: "alb_{{ name }}"
        region: "{{ region }}"
        security_groups: "{{app_lb_sg_information.group_id}}"
        subnets:
          - "{{ prisub01id }}"
          - "{{ prisub02id }}"
          - "{{ prisub03id }}"
        listeners:
          - Protocol: HTTP 
            Port: 80 
            DefaultActions:
              - Type: forward # Required.
                TargetGroupName: "alb_TG_{{ name }}"
        tags:
          Name: "alb_{{ name }}"
          Service: "ALB target group"
          Environment: "{{ env }}"
          Resource owner: "{{ res_owner }}"
          Team: "{{ team }}"
        state: present
      register: elb_information

    - name: Insert /update Hosts IP & Name in file provision-stack/group-vars/hostips
      blockinfile:
        path: provision-stack/group-vars/hostips
        block: |
          web01_ip: {{ web01_host_information.instances[0].private_ip_address }}
          app01_ip: {{ app01_host_information.instances[0].private_ip_address }}
          mc01_ip: {{ mc01_host_information.instances[0].private_ip_address }}
          rmq01_ip: {{ rmq01_host_information.instances[0].private_ip_address }}
          db01_ip: {{ db01_host_information.instances[0].private_ip_address }}

    - name: Copy key to provision-stack directory
      copy:
        src: "keys/{{ec2_keypair_name}}.pem"
        dest: provision-stack/keypair-vpro.pem
        mode: '0400'

    - name: Insert /update Hosts IP & Name in file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01  ansible_host= {{ web01_host_information.instances[0].private_ip_address }}
          app01 ansible_host= {{ app01_host_information.instances[0].private_ip_address }}
          mc01 ansible_host= {{ mc01_host_information.instances[0].private_ip_address }}
          rmq01 ansible_host= {{ rmq01_host_information.instances[0].private_ip_address }} 
          db01 ansible_host= {{ db01_host_information.instances[0].private_ip_address }}
          cntl ansible_host= 127.0.0.0 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [mcsrvgrp]
          mc01

          [rmqsrvgrp]
          rmp01

          [dbsrvgrp]
          db01

          [control]
          web01

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          mcsrvgrp
          rmqsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file="{{ec2_keypair_name}}.pem"
          